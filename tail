==> op.c <==
	{
		args = ft_strsplit(coms[--i], ',');
		i = -1;
		while (args[++i])
			ft_printf("\tP:%d : %s\n", i, args[i]);
	}
	return (get_bytes(coms, args, lc));
}

void	bytecode(int fdc, int fds)
{
	char	*line;
	t_byte	b;
	t_byte	f;
	static int	lc;

	f.code = (uint8_t *)malloc(0);
	f.count = 0;
	while((get_next_line(fds, &line)))
	{
		lc++;
		ft_printf("line: %s\n", line);
		if (line[0])
			if ((b = asm_parse(line, lc)) != (t_byte)NULL)
			{
				b = asm_parse(line, lc);
				f.code = (uint8_t *)realloc(f.code, f.count + b.count);
				ft_memcpy(&f.code[f.count], &b.code[0], b.count);
				f.count += bytes.count;
				free(b.code);
			}
		free(line);
	}
	ft_printf("EOF\n");
	write(fdc, &f.code, f.count);
	free(f.code);
}
